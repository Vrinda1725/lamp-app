name: Deploy to EC2

on:
  workflow_dispatch:   
  push:
    branches:
      - master

jobs:
 deploy:
    runs-on: ubuntu-latest

    env:
      # SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      # EC2_IP: ${{ secrets.EC2_IP }}
      EC2_SECURITY_GROUP_ID: ${{ secrets.EC2_SECURITY_GROUP_ID }}
      ASG_NAME: ${{ secrets.ASG_NAME }}
      LOAD_BALANCER_URL: ${{ secrets.LOAD_BALANCER_URL }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}    

    - name: Get GitHub Actions Runner IP
      id: get_ip
      run: |
        RUNNER_IP=$(curl -s https://api.ipify.org)
        echo "RUNNER_IP=$RUNNER_IP" >> $GITHUB_ENV
        echo "GitHub runner IP: $RUNNER_IP"    

    # - name: Add GitHub Actions Runner IP to EC2 Security Group
    #   run: |
    #     aws ec2 authorize-security-group-ingress --group-id $EC2_SECURITY_GROUP_ID --protocol tcp --port 22 --cidr $RUNNER_IP/32    

    - name: Add EC2 DNS name to known hosts
      env:
        LOAD_BALANCER_URL: ${{ secrets.LOAD_BALANCER_URL }}
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H $LOAD_BALANCER_URL >> ~/.ssh/known_hosts
        
    # - name: Copy files to EC2
    #   run: |
    #     mkdir -p ~/.ssh
    #     echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    #     chmod 600 ~/.ssh/id_rsa
    #     rsync -avz --exclude='.git' . ubuntu@$EC2_IP:/var/www/

    # - name: Remove GitHub Actions Runner IP from EC2 Security Group
    #   run: |
    #     aws ec2 revoke-security-group-ingress --group-id $EC2_SECURITY_GROUP_ID --protocol tcp --port 22 --cidr $RUNNER_IP/32   

    - name: Refresh Auto Scaling Group Instances
      run: |
        INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-instances \
          --query "AutoScalingInstances[?AutoScalingGroupName=='$ASG_NAME'].InstanceId" \
          --output text)

        for INSTANCE in $INSTANCE_IDS; do
          aws ec2 terminate-instances --instance-ids $INSTANCE
        done    

    - name: Generate Load on Load Balancer
      run: |
        URL=$LOAD_BALANCER_URL
        echo "Generating load on $URL"
      
        ab -n 10000 -c 1000 $URL

    - name: Wait and Verify Autoscaling
      run: |
        echo "Waiting for autoscaling to stabilize..."
        sleep 300 

        # Verify instance count in ASG
        INSTANCE_COUNT=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names $ASG_NAME \
          --query "AutoScalingGroups[0].Instances | length(@)" \
          --output text)

        echo "Number of instances in ASG: $INSTANCE_COUNT"

        if [ "$INSTANCE_COUNT" -le 1 ]; then
          echo "Autoscaling did not trigger as expected."
          exit 1
        else
          echo "Autoscaling triggered successfully. Instances scaled up."
        fi    


